from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv
import json

load_dotenv()

app = Flask(__name__)
CORS(app)

# Optional: Add request logging
@app.before_request
def log_request_info():
    app.logger.debug('Headers: %s', request.headers)
    app.logger.debug('Body: %s', request.get_data())

@app.route('/api/process-data', methods=['POST'])
def process_data():
    try:
        data = request.json
        
        # Check if JSON data was provided
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
        
        # Validate required fields
        required_fields = ['name', 'age', 'topic', 'purpose']
        for field in required_fields:
            if field not in data or not str(data[field]).strip():
                return jsonify({'error': f'Missing required field: {field}'}), 400

        # Extract data
        name = data['name']
        age = data['age']
        topic = data['topic']
        purpose = data['purpose']
        context = data.get('context', 'Not provided')
        
        # Generate response
        ai_response = f"""
Hello {name}!

Thank you for your interest in {topic}. Since you're {age} years old and looking for {purpose}, 
here's some information that might be helpful:

**Topic:** {topic}
**Purpose:** {purpose}
**Additional Context:** {context}

This is a sample response that would normally be generated by an AI assistant. 
The system would provide personalized content about {topic} tailored for someone your age 
looking to achieve: {purpose}.

For actual AI-generated responses, please configure the OpenAI API.
"""

        return jsonify({
            'success': True,
            'response': ai_response.strip()
        })

    except Exception as e:
        print(f"Error in process-data: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'healthy', 
        'message': 'Backend is running without OpenAI integration'
    })

# Optional: Add a root endpoint
@app.route('/')
def home():
    return jsonify({
        'message': 'Flask Backend is running!',
        'endpoints': {
            'health': '/api/health (GET)',
            'process_data': '/api/process-data (POST)'
        }
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=os.environ.get('FLASK_DEBUG', 'False').lower() == 'true', 
            host='0.0.0.0', port=port)
